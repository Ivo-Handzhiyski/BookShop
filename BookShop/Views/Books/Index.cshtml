@model BookShop.ViewModels.Books.BookIndexViewModel;
@using X.PagedList.Mvc.Core;
@using X.PagedList;
@{
    ViewData["Title"] = "Books List";
}

<div class="container mt-5">
    <h1 class="mb-4">Books List</h1>
    <div class="d-flex justify-content-end mb-3">
        <a href="@Url.Action("Create", "Books")" class="btn btn-primary">Create New Book</a>
    </div>
    <form method="get" action="@Url.Action("Index", "Books")", >
    <div class="d-flex justify-content-end mb-3">
        @foreach (var genre in Model.Genres)
        {
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="checkbox" id="genre-@genre.GenreId" name="selectedGenre" value="@genre.GenreId" @(Model.SelectedGenre != null && Model.SelectedGenre.Contains(genre.GenreId) ? "checked" : "")>
                <label class="form-check-label" for="genre-@genre.GenreId">@genre.GenreName</label>
            </div>
        }
        <button type="submit" class="btn btn-primary ml-2">Apply Filters</button>
    </div>
    </form>
    <table class="table table-striped table-hover">
        <thead class="thead-dark">
            <tr>
                <th>@Html.DisplayNameFor(model => model.Books.FirstOrDefault().ISBN)</th>
                <th>@Html.DisplayNameFor(model => model.Books.FirstOrDefault().Title)</th>
                <th>@Html.DisplayNameFor(model => model.Books.FirstOrDefault().Price)</th>
                <th>@Html.DisplayNameFor(model => model.Books.FirstOrDefault().PublicationDate)</th>
                <th>@Html.DisplayNameFor(model => model.Books.FirstOrDefault().Edition)</th>
                <th>@Html.DisplayNameFor(model => model.Books.FirstOrDefault().AvailableQuantity)</th>
                <th>@Html.DisplayNameFor(model => model.Books.FirstOrDefault().Author.AuthorName)</th>
                <th>@Html.DisplayNameFor(model => model.Books.FirstOrDefault().Publisher.PublisherName)</th>
                <th>Genres</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Books)
            {
                var publicationDate = item.PublicationDate.ToShortDateString();
                <tr>
                    <td>@Html.DisplayFor(modelItem => item.ISBN)</td>
                    <td>@Html.DisplayFor(modelItem => item.Title)</td>
                    <td>@Html.DisplayFor(modelItem => item.Price)</td>
                    
                    <td>@Html.DisplayFor(modelItem => publicationDate)</td>
                    <td>@Html.DisplayFor(modelItem => item.Edition)</td>
                    <td>@Html.DisplayFor(modelItem => item.AvailableQuantity)</td>
                    <td>@Html.DisplayFor(modelItem => item.Author.AuthorName)</td>
                    <td>@Html.DisplayFor(modelItem => item.Publisher.PublisherName)</td>
                    <td>@string.Join(", ", item.BookGenres.Select(bg => bg.Genre.GenreName))</td>
                    <td>
                        <a href="@Url.Action("Edit", "Books", new { id = item.ISBN })" class="btn btn-sm btn-warning">Edit</a>
                        <a href="@Url.Action("Details", "Books", new { id = item.ISBN })" class="btn btn-sm btn-info">Details</a>
                        <a href="@Url.Action("Delete", "Books", new { id = item.ISBN })" class="btn btn-sm btn-danger">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-center mb-5">
        @Html.PagedListPager(Model.Books, page => Url.Action("Index", new { page }), new PagedListRenderOptions
        {
            UlElementClasses = new[] { "pagination" },
            LiElementClasses = new[] { "page-item" },
            PageClasses = new[] { "page-link" },
            ContainerDivClasses = new[] { "d-flex justify-content-center" },
            PreviousElementClass = "page-item",
            NextElementClass = "page-item",
            ActiveLiElementClass = "page-item active"
        })
    </div>
</div>
